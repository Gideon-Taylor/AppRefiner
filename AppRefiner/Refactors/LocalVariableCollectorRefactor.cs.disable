using PeopleCodeParser.SelfHosted.Nodes;
using PeopleCodeParser.SelfHosted;
using PeopleCodeParser.SelfHosted.Visitors;
using PeopleCodeParser.SelfHosted.Visitors.Models;
using AppRefiner.Services;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace AppRefiner.Refactors
{
    public enum VariableCollectionMode
    {
        CollapseByType,
        ExplicitDeclarations
    }

    public enum ScopeProcessingMode
    {
        CurrentScopeOnly,
        AllScopes
    }

    /// <summary>
    /// Collects all local variable declarations in the current scope and groups them at the top
    /// </summary>
    public class LocalVariableCollectorRefactor : ScopedRefactor
    {
        public new static string RefactorName => "Collect Local Variables";
        public new static string RefactorDescription => "Collects all local variable declarations in the current scope and groups them at the top";

        public override bool RequiresUserInputDialog => true;
        public override bool DeferDialogUntilAfterVisitor => false;
        public new static bool RegisterKeyboardShortcut => false;

        private readonly List<VariableInfo> allVariableDeclarations = new();
        private readonly Dictionary<string, List<VariableInfo>> scopeVariables = new();
        private readonly Dictionary<string, int> scopeInsertionPoints = new();
        private VariableCollectionMode selectedMode = VariableCollectionMode.CollapseByType;
        private ScopeProcessingMode selectedScopeMode = ScopeProcessingMode.CurrentScopeOnly;

        public LocalVariableCollectorRefactor(AppRefiner.ScintillaEditor editor) : base(editor)
        {
        }

        /// <summary>
        /// Information about a variable declaration
        /// </summary>
        private class VariableInfo
        {
            public string Name { get; }
            public string Type { get; }
            public AstNode Node { get; }
            public SourceSpan SourceSpan { get; }
            public string? InitialValue { get; }

            public VariableInfo(string name, string type, AstNode node, SourceSpan sourceSpan, string? initialValue = null)
            {
                Name = name;
                Type = type;
                Node = node;
                SourceSpan = sourceSpan;
                InitialValue = initialValue;
            }
        }

        public override bool ShowRefactorDialog()
        {
            using var dialog = new VariableCollectionModeDialog();
            var wrapper = new WindowWrapper(GetEditorMainWindowHandle());
            DialogResult result = dialog.ShowDialog(wrapper);

            if (result == DialogResult.OK)
            {
                selectedMode = dialog.SelectedMode;
                selectedScopeMode = dialog.SelectedScopeMode;
                return true;
            }

            return false;
        }

        private class VariableCollectionModeDialog : Form
        {
            private Button btnOk = new();
            private Button btnCancel = new();
            private GroupBox modeGroupBox = new();
            private RadioButton rbCollapseByType = new();
            private RadioButton rbExplicitDeclarations = new();
            private GroupBox scopeGroupBox = new();
            private RadioButton rbCurrentScope = new();
            private RadioButton rbAllScopes = new();
            private Panel headerPanel = new();
            private Label headerLabel = new();

            public VariableCollectionMode SelectedMode { get; private set; } = VariableCollectionMode.CollapseByType;
            public ScopeProcessingMode SelectedScopeMode { get; private set; } = ScopeProcessingMode.CurrentScopeOnly;

            public VariableCollectionModeDialog()
            {
                InitializeComponent();
            }

            private void InitializeComponent()
            {
                this.SuspendLayout();
                
                // headerPanel
                this.headerPanel.BackColor = Color.FromArgb(50, 50, 60);
                this.headerPanel.Dock = DockStyle.Top;
                this.headerPanel.Height = 30;
                this.headerPanel.Controls.Add(this.headerLabel);
                
                // headerLabel
                this.headerLabel.Text = "Collect Local Variables";
                this.headerLabel.ForeColor = Color.White;
                this.headerLabel.Font = new Font("Segoe UI", 9F, FontStyle.Regular, GraphicsUnit.Point);
                this.headerLabel.Dock = DockStyle.Fill;
                this.headerLabel.TextAlign = ContentAlignment.MiddleCenter;
                
                // modeGroupBox
                this.modeGroupBox.Text = "Collection Mode";
                this.modeGroupBox.Location = new Point(12, 40);
                this.modeGroupBox.Size = new Size(300, 80);
                this.modeGroupBox.Controls.Add(this.rbCollapseByType);
                this.modeGroupBox.Controls.Add(this.rbExplicitDeclarations);
                
                // rbCollapseByType
                this.rbCollapseByType.Text = "Collapse by type (combine same types)";
                this.rbCollapseByType.Location = new Point(10, 20);
                this.rbCollapseByType.Size = new Size(280, 20);
                this.rbCollapseByType.Checked = true;
                
                // rbExplicitDeclarations
                this.rbExplicitDeclarations.Text = "Keep explicit declarations separate";
                this.rbExplicitDeclarations.Location = new Point(10, 45);
                this.rbExplicitDeclarations.Size = new Size(280, 20);
                
                // scopeGroupBox
                this.scopeGroupBox.Text = "Scope Processing";
                this.scopeGroupBox.Location = new Point(12, 130);
                this.scopeGroupBox.Size = new Size(300, 80);
                this.scopeGroupBox.Controls.Add(this.rbCurrentScope);
                this.scopeGroupBox.Controls.Add(this.rbAllScopes);
                
                // rbCurrentScope
                this.rbCurrentScope.Text = "Current scope only";
                this.rbCurrentScope.Location = new Point(10, 20);
                this.rbCurrentScope.Size = new Size(280, 20);
                this.rbCurrentScope.Checked = true;
                
                // rbAllScopes
                this.rbAllScopes.Text = "All scopes";
                this.rbAllScopes.Location = new Point(10, 45);
                this.rbAllScopes.Size = new Size(280, 20);
                
                // btnOk
                this.btnOk.Text = "&OK";
                this.btnOk.Location = new Point(160, 220);
                this.btnOk.Size = new Size(75, 28);
                this.btnOk.DialogResult = DialogResult.OK;
                this.btnOk.Click += BtnOk_Click;
                
                // btnCancel
                this.btnCancel.Text = "&Cancel";
                this.btnCancel.Location = new Point(240, 220);
                this.btnCancel.Size = new Size(75, 28);
                this.btnCancel.DialogResult = DialogResult.Cancel;
                
                // Form
                this.Text = "Collect Local Variables";
                this.Size = new Size(340, 280);
                this.StartPosition = FormStartPosition.CenterParent;
                this.FormBorderStyle = FormBorderStyle.None;
                this.Controls.AddRange(new Control[] { this.headerPanel, this.modeGroupBox, this.scopeGroupBox, this.btnOk, this.btnCancel });
                
                this.ResumeLayout(false);
            }

            private void BtnOk_Click(object? sender, EventArgs e)
            {
                SelectedMode = rbCollapseByType.Checked ? VariableCollectionMode.CollapseByType : VariableCollectionMode.ExplicitDeclarations;
                SelectedScopeMode = rbCurrentScope.Checked ? ScopeProcessingMode.CurrentScopeOnly : ScopeProcessingMode.AllScopes;
            }
        }

        public override void VisitLocalVariableDeclaration(LocalVariableDeclarationNode node)
        {
            // Collect variable declarations
            if (node.VariableNameInfos != null)
            {
                foreach (var varInfo in node.VariableNameInfos)
                {
                    if (varInfo.SourceSpan.IsValid)
                    {
                        var variableInfo = new VariableInfo(
                            varInfo.Name,
                            node.Type.ToString(),
                            node,
                            varInfo.SourceSpan
                        );
                        
                        allVariableDeclarations.Add(variableInfo);
                        
                        // Add to current scope
                        if (CurrentScope != null)
                        {
                            var scopeKey = GetScopeKey(CurrentScope);
                            if (!scopeVariables.ContainsKey(scopeKey))
                            {
                                scopeVariables[scopeKey] = new List<VariableInfo>();
                            }
                            scopeVariables[scopeKey].Add(variableInfo);
                        }
                    }
                }
            }

            base.VisitLocalVariableDeclaration(node);
        }

        protected override void OnEnterScope(PeopleCodeParser.SelfHosted.Visitors.Models.ScopeInfo scopeInfo)
        {
            // Track scope insertion points
            var scopeKey = GetScopeKey(scopeInfo);
            scopeInsertionPoints[scopeKey] = 0; // Default to beginning of file
        }

        /// <summary>
        /// Gets a unique key for the scope
        /// </summary>
        private string GetScopeKey(PeopleCodeParser.SelfHosted.Visitors.Models.ScopeInfo scope)
        {
            return $"{scope.Type}_{scope.Name}";
        }

        public override void VisitProgram(ProgramNode node)
        {
            base.VisitProgram(node);
            
            // Apply changes after collecting all variables
            ApplyVariableCollection();
        }

        /// <summary>
        /// Applies the variable collection changes
        /// </summary>
        private void ApplyVariableCollection()
        {
            if (allVariableDeclarations.Count == 0)
            {
                return;
            }

            // Process based on selected mode
            if (selectedScopeMode == ScopeProcessingMode.CurrentScopeOnly)
            {
                ProcessCurrentScopeOnly();
            }
            else
            {
                ProcessAllScopes();
            }
        }

        private void ProcessCurrentScopeOnly()
        {
            // Find variables in the current cursor scope
            var scopesContainingCursor = GetScopesContaining(CurrentPosition).ToList();
            if (scopesContainingCursor.Count > 0)
            {
                var targetScope = scopesContainingCursor.First();
                var scopeKey = GetScopeKey(targetScope);
                
                if (scopeVariables.TryGetValue(scopeKey, out var variables))
                {
                    CollectVariablesInScope(scopeKey, variables);
                }
            }
        }

        private void ProcessAllScopes()
        {
            // Process all scopes
            foreach (var scopePair in scopeVariables)
            {
                CollectVariablesInScope(scopePair.Key, scopePair.Value);
            }
        }

        private void CollectVariablesInScope(string scopeKey, List<VariableInfo> variables)
        {
            if (variables.Count <= 1) return; // No need to collect single variable

            // Group variables by type if in collapse mode
            List<string> collectedDeclarations;
            
            if (selectedMode == VariableCollectionMode.CollapseByType)
            {
                var groupedByType = variables.GroupBy(v => v.Type).ToList();
                collectedDeclarations = groupedByType.Select(group =>
                {
                    var variableNames = string.Join(", ", group.Select(v => v.Name));
                    return $"Local {group.Key} {variableNames};";
                }).ToList();
            }
            else
            {
                collectedDeclarations = variables.Select(v => $"Local {v.Type} {v.Name};").ToList();
            }

            // Remove original declarations (in reverse order to maintain positions)
            var sortedVariables = variables.OrderByDescending(v => v.SourceSpan.Start.ByteIndex).ToList();
            foreach (var variable in sortedVariables)
            {
                DeleteText(variable.Node.SourceSpan, $"Remove original declaration of {variable.Name}");
            }

            // Insert collected declarations at the scope start
            if (scopeInsertionPoints.TryGetValue(scopeKey, out var insertionPoint))
            {
                var collectedText = string.Join(Environment.NewLine, collectedDeclarations) + Environment.NewLine + Environment.NewLine;
                InsertText(insertionPoint, collectedText, "Insert collected variable declarations");
            }
        }
    }
}