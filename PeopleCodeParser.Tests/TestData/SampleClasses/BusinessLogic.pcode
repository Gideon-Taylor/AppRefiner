IMPORT MyApp:Utilities:*;
IMPORT MyApp:DataAccess:IRepository;

CLASS BusinessLogicProcessor EXTENDS MyApp:BaseClasses:ServiceBase
                             IMPLEMENTS MyApp:Interfaces:IBusinessProcessor
    
    PROPERTY string ServiceName GET;
    PROPERTY number MaxRetries GET SET;
    PROPERTY boolean IsActive GET SET;
    
PROTECTED
    METHOD Initialize() RETURNS boolean;
    METHOD ProcessRequest(&request AS any) RETURNS any;
    METHOD ValidateData(&data AS any) RETURNS boolean;
    
PRIVATE
    INSTANCE string &serviceName;
    INSTANCE number &maxRetries;
    INSTANCE boolean &isActive;
    INSTANCE MyApp:DataAccess:IRepository &repository;
    
    CONSTANT DEFAULT_RETRIES = 3;
    CONSTANT SERVICE_TIMEOUT = 30;
    
END-CLASS;

METHOD BusinessLogicProcessor.Initialize
/+ RETURNS boolean +/
    TRY
        &serviceName = "Business Logic Processor";
        &maxRetries = DEFAULT_RETRIES;
        &isActive = TRUE;
        &repository = CREATE MyApp:DataAccess:DatabaseRepository();
        
        IF &repository.TestConnection() THEN
            RETURN TRUE;
        ELSE
            ERROR "Failed to connect to database";
            RETURN FALSE;
        END-IF;
        
    CATCH Exception &e
        ERROR "Initialization failed: " | &e.Message;
        RETURN FALSE;
    END-TRY;
END-METHOD;

METHOD BusinessLogicProcessor.ProcessRequest
/+ &request AS any +/
/+ RETURNS any +/
    LOCAL any &response;
    LOCAL number &attempts = 0;
    LOCAL boolean &success = FALSE;
    
    WHILE &attempts < &maxRetries AND NOT &success
        &attempts = &attempts + 1;
        
        TRY
            IF ValidateData(&request) THEN
                &response = &repository.ProcessData(&request);
                &success = TRUE;
            ELSE
                THROW CREATE Exception("Invalid request data");
            END-IF;
            
        CATCH Exception &e
            WARNING "Attempt " | String(&attempts) | " failed: " | &e.Message;
            
            IF &attempts >= &maxRetries THEN
                THROW &e;
            END-IF;
        END-TRY;
    END-WHILE;
    
    RETURN &response;
END-METHOD;

GET BusinessLogicProcessor.ServiceName
/+ RETURNS string +/
    RETURN &serviceName;
END-GET;

SET BusinessLogicProcessor.MaxRetries
/+ &value AS number +/
    IF &value > 0 AND &value <= 10 THEN
        &maxRetries = &value;
    ELSE
        THROW CREATE Exception("MaxRetries must be between 1 and 10");
    END-IF;
END-SET;